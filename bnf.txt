<program>       := <funcdef>+
<funcdef>       := fn <ident> '(' <funcargs> ')' { <statlist> }'
<funcargs>      := <ident>(, <ident>)*
<statlist>      := <statement>;(<statement>;)*
<statement>     := <call_func> | <call_if> | <call_while> | <assign> | <return> | <break>
<call_func>     := <ident> '(' <literal>(, <literal>)*')'
<call_if>       := if '('<relation>')' { <statlist> } [else (<statlist>|<call_if>]
<call_while>    := while '('<relation>')' { <statlist> } 
<assign>        := <ident> = <expression> 
<return>        := return
<break>         := break
<relation>      := <bool> |<expression> <rel_op> <expression>
<rel_op>        := > | < | == | != | <= | >= 
<expression>    := <expression> <add_op> <term> | <term>
<term>          := <term> <mul_op> <factor> | <factor>
<factor>        := <literal> | "(" <expression> ")" | <funccall>
<add_op>        := + | -
<mul_op>        := * | / | %
<string>        := "<any charactor>"
<number>        := <digit>+
<bool>          := true | false
<literal>       := <number> | <string> | <bool> | <ident>
<ident>         := <latter>(<latter> | <digit>)*
<latter>        := [a-zA-Z]
<digit>         := [0-9]